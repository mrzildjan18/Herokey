3. 
SELECT COUNT(INV_NUMBER) FROM INVOICE;

4. 
SELECT COUNT(CUS_BALANCE) FROM CUSTOMER
WHERE CUS_BALANCE >= 500;

5. 
SELECT CUSTOMER.CUS_CODE, INVOICE.INV_NUMBER, INVOICE.INV_DATE, PRODUCT.P_DESCRIPT, LINE.LINE_UNITS, LINE.LINE_PRICE
FROM CUSTOMER, INVOICE, PRODUCT, LINE
WHERE (CUSTOMER.CUS_CODE = INVOICE.CUS_CODE) AND (INVOICE.INV_NUMBER = LINE.INV_NUMBER) AND (LINE.P_CODE = PRODUCT.P_CODE)
ORDER BY CUSTOMER.CUS_CODE, INVOICE.INV_NUMBER;


6. 
SELECT CUSTOMER.CUS_CODE, INVOICE.INV_NUMBER, PRODUCT.P_DESCRIPT, LINE.LINE_UNITS, LINE.LINE_PRICE, (LINE.LINE_UNITS * LINE.LINE_PRICE) AS SUBTOTAL
FROM CUSTOMER, INVOICE, PRODUCT, LINE
WHERE (CUSTOMER.CUS_CODE = INVOICE.CUS_CODE) AND (INVOICE.INV_NUMBER = LINE.INV_NUMBER) AND (LINE.P_CODE = PRODUCT.P_CODE)
ORDER BY CUSTOMER.CUS_CODE, INVOICE.INV_NUMBER;

7. 
SELECT CUSTOMER.CUS_CODE, CUSTOMER.CUS_BALANCE, SUM(LINE.LINE_UNITS * LINE.LINE_PRICE) AS "TOTAL PURCHASE"
FROM CUSTOMER, INVOICE, LINE
WHERE (CUSTOMER.CUS_CODE = INVOICE.CUS_CODE) AND (INVOICE.INV_NUMBER = LINE.INV_NUMBER)
GROUP BY CUSTOMER.CUS_CODE, CUSTOMER.CUS_BALANCE
ORDER BY CUSTOMER.CUS_CODE;

8. 

SELECT CUSTOMER.CUS_CODE, CUSTOMER.CUS_BALANCE, SUM(LINE.LINE_UNITS * LINE.LINE_PRICE) AS "TOTAL PURCHASE", COUNT(DISTINCT LINE.LINE_NUMBER) AS "NUMBER OF PURCHASE"
FROM CUSTOMER, INVOICE, LINE
WHERE (CUSTOMER.CUS_CODE = INVOICE.CUS_CODE) AND (INVOICE.INV_NUMBER = LINE.INV_NUMBER)
GROUP BY CUSTOMER.CUS_CODE, CUSTOMER.CUS_BALANCE;


SELECT CUSTOMER.CUS_CODE, CUSTOMER.CUS_BALANCE, COUNT(DISTINCT LINE.LINE_NUMBER) AS "NUMBER OF PURCHASE", SUM(LINE.LINE_UNITS * LINE.LINE_PRICE) AS "TOTAL PURCHASE"
FROM CUSTOMER
INNER JOIN INVOICE ON CUSTOMER.CUS_CODE = INVOICE.CUS_CODE
INNER JOIN LINE ON INVOICE.INV_NUMBER = LINE.INV_NUMBER
GROUP BY CUSTOMER.CUS_CODE, CUSTOMER.CUS_BALANCE

9. 


10.
SELECT DISTINCT INVOICE.INV_NUMBER, (SELECT SUM(LINE.LINE_UNITS * PRODUCT.P_PRICE) 
FROM LINE, PRODUCT WHERE LINE.P_CODE = PRODUCT.P_CODE AND LINE.INV_NUMBER = INVOICE.INV_NUMBER) AS "INVOICE TOTAL"
FROM INVOICE, LINE, PRODUCT
WHERE INVOICE.INV_NUMBER = LINE.INV_NUMBER AND LINE.P_CODE = PRODUCT.P_CODE;

11. 
SELECT DISTINCT CUSTOMER.CUS_CODE, INVOICE.INV_NUMBER, (SELECT SUM(LINE.LINE_UNITS * PRODUCT.P_PRICE) 
FROM LINE, PRODUCT WHERE LINE.P_CODE = PRODUCT.P_CODE AND LINE.INV_NUMBER = INVOICE.INV_NUMBER) AS "INVOICE TOTAL"
FROM CUSTOMER, INVOICE, LINE, PRODUCT
WHERE CUSTOMER.CUS_CODE = INVOICE.CUS_CODE AND INVOICE.INV_NUMBER = LINE.INV_NUMBER AND LINE.P_CODE = PRODUCT.P_CODE;

12.
SELECT CUSTOMER.CUS_CODE, COUNT(DISTINCT INVOICE.INV_NUMBER) AS "NUMBER OF INVOICE", SUM(LINE.LINE_UNITS * LINE.LINE_PRICE) AS "TOTAL CUSTOMER PURCHASE"
FROM CUSTOMER, INVOICE, LINE
WHERE (CUSTOMER.CUS_CODE = INVOICE.CUS_CODE) AND (INVOICE.INV_NUMBER = LINE.INV_NUMBER)
GROUP BY CUSTOMER.CUS_CODE, CUSTOMER.CUS_BALANCE;

12.
SELECT C.CUS_CODE, COUNT(DISTINCT I.INV_NUMBER) AS "NUMBER OF INVOICES", CAST(SUM(L.LINE_UNITS * L.LINE_PRICE) AS NUMERIC(9,2)) AS "TOTAL CUSTOMER PURCHASES"
FROM CUSTOMER C, INVOICE I, LINE L
WHERE (C.CUS_CODE = I.CUS_CODE) AND (I.INV_NUMBER = L.INV_NUMBER)
GROUP BY C.CUS_CODE
ORDER BY C.CUS_CODE;

13. KUWANG
SELECT COUNT(DISTINCT I.INV_NUMBER) AS "TOTAL INVOICES", SUM(L.LINE_UNITS * L.LINE_PRICE) AS "TOTAL SALES", MIN(L.LINE_UNITS * L.LINE_PRICE) AS "MINIMUM CUSTOMER PURCHASES", MAX(L.LINE_UNITS * L.LINE_PRICE) AS "LARGEST CUSTOMER PURCHASES", AVG(L.LINE_UNITS * L.LINE_PRICE) AS "AVERAGE CUSTOMER PURCHASES"
FROM INVOICE I, LINE L, CUSTOMER C
WHERE (I.INV_NUMBER = L.INV_NUMBER) AND (C.CUS_CODE = I.CUS_CODE);

14.
SELECT C.CUS_CODE, C.CUS_BALANCE
FROM CUSTOMER C, INVOICE I
WHERE(C.CUS_CODE = I.CUS_CODE)
GROUP BY C.CUS_CODE
ORDER BY C.CUS_CODE;

15.
SELECT MIN(CUSTOMER.CUS_BALANCE) AS MINIMUM_BALANCE, MAX(CUSTOMER.CUS_BALANCE) AS MAXIMUM_BALANCE, 
CAST(AVG(CUSTOMER.CUS_BALANCE) AS NUMERIC(9,2)) AS AVERAGE_BALANCE
FROM CUSTOMER
WHERE EXISTS(SELECT FROM INVOICE WHERE INVOICE.CUS_CODE = CUSTOMER.CUS_CODE);

16.
SELECT SUM(CUS_BALANCE) AS "TOTAL BALANCES", MIN(CUS_BALANCE) AS "MINIMUM BALANCE", MAX(CUS_BALANCE) AS "MAXIMUM BALANCE", CAST(AVG(CUS_BALANCE) AS NUMERIC(9,2)) AS "AVERAGE BALANCE"
FROM CUSTOMER;

17.
SELECT C.CUS_CODE, C.CUS_BALANCE
FROM CUSTOMER C, INVOICE I
WHERE C.CUS_CODE NOT IN (SELECT CUS_CODE FROM INVOICE)
GROUP BY C.CUS_CODE
ORDER BY C.CUS_CODE;

18.
SELECT SUM(DISTINCT C.CUS_BALANCE) AS "TOTAL BALANCE", MIN(C.CUS_BALANCE) AS "MIN BALANCE", MAX(C.CUS_BALANCE) AS "MAXIMUM BALANCE", CAST(AVG(C.CUS_BALANCE) AS NUMERIC(9,2)) AS "AVERAGE BALANCE"
FROM CUSTOMER C, INVOICE I
WHERE C.CUS_CODE NOT IN (SELECT CUS_CODE FROM INVOICE);

19.
SELECT P_DESCRIPT, P_QOH, P_PRICE, CAST(P_QOH * P_PRICE AS NUMERIC(9,2)) AS SUBTOTAL
FROM PRODUCT
ORDER BY SUBTOTAL DESC;

20.
SELECT CAST(SUM(P_QOH*P_PRICE) AS NUMERIC(9,2)) AS "TOTAL VALUE OF INVENTORY"
FROM PRODUCT;

